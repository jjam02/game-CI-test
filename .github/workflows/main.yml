name: Build Unity Projects and Deploy them

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_webgl:
    name: Build WEBGL
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build WEBGL
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: WEBGL
          path: build

  deploy_webgl:
    name: Deploy WebGL to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build_webgl] # Ensure build_webgl job completes before deploying
    steps:
      # Download WebGL artifacts
      - name: Download WebGL artifacts
        uses: actions/download-artifact@v3
        with:
          name: WEBGL # Name of the artifact to download
          path: webgl_build # Destination path to download the artifact

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.7.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          BRANCH: gh-pages # Branch to deploy to test
          FOLDER: webgl_build/WebGL # Folder containing the extracted WebGL files

  build_windows:
    name: Build Windows
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build Windows
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          allowDirtyBuild: true

      # Output
      - uses: actions/upload-artifact@v3
        with:
          name: Windows Build
          path: build

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build_windows]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only create release on main branch pushes
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0 # Set the tag name for the release
          release_name: Release 1.0.0 # Set the release name
          body: |
            Latest Windows build of permanence break
          draft: false
          prerelease: false

      - name: Attach Windows Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/ # Path to the Windows build artifact
          asset_name: Windows_Build.zip # Name for the uploaded artifact
          asset_content_type: application/zip
